<?php

/**
 * @file
 * Provides hooks and functions for address field lookup.
 */

use Drupal\Component\Utility\NestedArray;

/**
 * Implements hook_help().
 */
function addressfield_lookup_help($path, $arg) {
  switch ($path) {
    case 'admin/help#addressfield_lookup':
      $output = '<h2>' . t('Address Field Lookup') . '</h2>';
      $output .= '<p>' . t("The module provides an abstracted API for providing address field lookup services. Other modules can define their own services which are configurable from this module.") . '<p>';

      return $output;

    case 'admin/config/regional/addressfield-lookup':
      $output = '<p>' . t("From this page you can see a list of all currently available address field lookup services. You can choose the default lookup service here and configure individual settings for each service. You can also test that your default service is working.") . '<p>';

      return $output;
  }
}

/**
 * Implements hook_flush_caches().
 */
function addressfield_lookup_flush_caches() {
  return array(
    'cache_addressfield_lookup_addresses',
    'cache_addressfield_lookup_address_details',
  );
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Use the right form elements identifiers needed for "#limit_validation_errors"
 * : "Postcode" & "House number or name" only, on "Find address" button element.
 *
 * @see https://drupal.org/node/2189327
 */
function addressfield_lookup_field_widget_form_alter(&$element, &$form_state, $context) {
  // Only apply for address field lookup.
  if ($context['field']['type'] === 'addressfield' && !empty($element['addressfield_lookup_find_address'])) {
    // Parents array of an addressfield element in a entity form.
    $array_parents = array(
      $context['field']['field_name'],
      $context['langcode'],
      $context['delta'],
    );

    // Parents array of an addressfield element for the entire built form.
    $array_parents = array_merge($context['form']['#parents'], $array_parents);

    // Get the house number and postal code fields.
    $addressfield_lookup_house_number = array_merge($array_parents, array('addressfield_lookup_house_number'));
    $addressfield_lookup_postal_code = array_merge($array_parents, array('addressfield_lookup_postal_code'));

    // Set the limit_validation_errors element.
    $element['addressfield_lookup_find_address']['#limit_validation_errors'] = array($addressfield_lookup_postal_code, $addressfield_lookup_house_number);
  }
}

/**
 * A set of default address values.
 */
function _addressfield_lookup_default_values(&$address) {
  $address['thoroughfare'] = '';
  $address['sub_premise'] = '';
  $address['premise'] = '';
  $address['dependent_locality'] = '';
  $address['administrative_area'] = '';
  $address['organisation_name'] = '';
  $address['locality'] = '';
}

/**
 * Prepare an array of address options for use in a Drupal select element.
 *
 * @param array $addresses
 *   Array of addresses from an address lookup, in the format:
 *     id - Address ID
 *     street - Street (Address Line 1)
 *     place - Remainder of address.
 *
 * @return array $address_options
 *   Array of address options for use in a Drupal select element, keyed by id.
 */
function _addressfield_lookup_prepare_options(array $addresses) {
  $address_options = array();

  // Prepare the options.
  if (!empty($addresses)) {
    foreach ($addresses as $address) {
      $address_options[$address['id']] = $address['street'];

      if (!empty($address['place'])) {
        $address_options[$address['id']] .= ', ' . $address['place'];
      }
    }
  }

  return $address_options;
}

/**
 * Populate addressfield with the selected postal code address data.
 */
function _addressfield_lookup_populate_addressfield($address_id, $element, &$form_state) {
  // Ensure we have a valid address ID.
  if (!empty($address_id)) {
    // Get the address element from the form.
    $array_parents = array_slice($element['#parents'], 0, -1);
    $address = NestedArray::getValue($form_state['values'], $array_parents);

    // Get the full details for this address ID.
    $address_details = \Drupal::service('plugin.manager.address_lookup')->getAddressDetails($address_id);

    // Check we have some details.
    if (!empty($address_details)) {
      // Reset the address to the default values.
      _addressfield_lookup_default_values($address);

      // Set the retrieved details on the address.
      $address = array_merge($address, $address_details);

      // Set the address ID value on the form.
      $address['addressfield_lookup_addresses_select'] = $address_id;

      // Set the mode based on presence of the house number.
      if (!empty($address['addressfield_lookup_house_number'])) {
        $address['addressfield_lookup_mode'] = 'address_selected';
      }
      else {
        $address['addressfield_lookup_mode'] = 'address_selection';
      }

      // Update the form state, where possible.
      if (isset($address['element_key'], $form_state['addressfield'][$address['element_key']])) {
        $form_state['addressfield'][$address['element_key']] = array_diff_key($address, ['element_key' => '']);
      }

      // Set the address values on the form.
      foreach ($address as $key => $value) {
        // Update the form state for addressfield.
        // Note: form_state['input'] must be updated so that
        // addressfield_lookup_addressfield_format_generate() has correct
        // information during the rebuild.
        NestedArray::setValue($form_state['values'], array_merge($array_parents, [$key]), $value, TRUE);
        NestedArray::setValue($form_state['input'], array_merge($array_parents, [$key]), $value, TRUE);
      }
    }
  }
}

/**
 * Check if a country address format has a usable postcode field.
 *
 * @param array $format
 *   The country address format being checked.
 *
 * @return bool
 *   Does the country format have a usable postcode field.
 */
function _addressfield_lookup_country_format_has_postal_code(array $format) {
  return !empty($format['locality_block']['postal_code']) && $format['locality_block']['postal_code']['#access'] === TRUE;
}
