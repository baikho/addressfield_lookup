<?php

/**
 * @file
 * Provides a PostcodeAnywhere based address field lookup service.
 */

use Drupal\addressfield_lookup_postcodeanywhere\PCAPredict;
use Drupal\addressfield_lookup_postcodeanywhere\PCAPredictAdapter;
use Drupal\Component\Utility\NestedArray;

/**
 * Implements hook_addressfield_lookup_service_info().
 */
function addressfield_lookup_postcodeanywhere_addressfield_lookup_service_info() {
  return [
    'postcodeanywhere' => [
      'name' => t('Postcode Anywhere'),
      'class' => 'AddressFieldLookupPostcodeAnywhere',
      'object factory' => 'addressfield_lookup_postcodeanywhere_create',
      'description' => t('Provides an address field lookup service based on integration with the PCA Predict (formerly Postcode Anywhere) API.'),
      'config path' => 'admin/config/regional/addressfield-lookup/postcodeanywhere/configure',
      'test data' => 'LL11 5HJ',
    ],
  ];
}

/**
 * Factory function: creates the postcode anywhere lookup service object.
 *
 * @param array $service_info
 *   Config array describing the lookup service.
 * @param string $country
 *   ISO2 code of the country to get addresses in.
 *
 * @return AddressFieldLookupInterface
 *   The instantiated lookup class.
 *
 * @see hook_addressfield_lookup_service_info()
 */
function addressfield_lookup_postcodeanywhere_create($service_info, $country = 'GB') {
  $language = \Drupal::languageManager()->getCurrentLanguage();
  $postcode_anywhere_service = &drupal_static(__FUNCTION__);
  $config = \Drupal::config('addressfield_lookup_postcodeanywhere.settings');

  // Check the postcode anywhere configuration variables exist.
  if (!$config->get('addressfield_lookup_postcodeanywhere_license')) {
    throw new \Exception('Postcode Anywhere has not been configured.');
  }

  // Instantiate the API class.
  if (!isset($postcode_anywhere_service[$country])) {
    $pca_predict = new PCAPredictAdapter(
      $config->get('addressfield_lookup_postcodeanywhere_license'),
      $config->get('addressfield_lookup_postcodeanywhere_login'),
      $language->getName(),
      'Everything',
      $country
    );
    $postcode_anywhere_service[$country] = new $service_info['class']($pca_predict);
  }

  return $postcode_anywhere_service[$country];
}

/**
 * Implements hook_addressfield_lookup_format_update().
 */
function addressfield_lookup_postcodeanywhere_addressfield_lookup_format_update($format, $address) {
  // We may need to trigger another find at this stage, so change the validate
  // logic for the address selection element.
  if (isset($address['addressfield_lookup_mode']) && $address['addressfield_lookup_mode'] === 'address_selection') {
    $format['addressfield_lookup_addresses_select']['#ajax']['callback'] = 'addressfield_lookup_postcodeanywhere_standard_widget_refresh';
    $format['addressfield_lookup_addresses_select']['#element_validate'] = ['_addressfield_lookup_postcodeanywhere_addresses_select_validate'];
  }

  // Add new GB address elements if the address country is GB.
  if ($address['country'] === 'GB') {
    // Add the 'sub premise' element if it is not defined.
    if (empty($format['street_block']['sub_premise'])) {
      $format['street_block']['sub_premise'] = [
        '#title' => t('Flat No.'),
        '#tag' => 'div',
        '#attributes' => ['class' => ['sub-premise']],
        '#size' => 30,
        '#weight' => -10,
      ];

      // Re-order the form elements considering 'sub premise' element.
      $format['street_block']['premise']['#weight'] = -9;
    }

    // Add the 'dependent locality' element if it is not defined.
    if (empty($format['locality_block']['dependent_locality'])) {
      $format['locality_block']['dependent_locality'] = [
        '#title' => t('Address 2'),
        '#tag' => 'div',
        '#attributes' => ['class' => ['dependent-locality']],
        '#size' => 30,
      ];
    }

    // Rename the form elements considering 'dependent locality' element.
    $format['street_block']['premise']['#title'] = t('House Name/Building');
  }
  else {
    // Remove all address field lookup elements if this is not a country that
    // is supported by the PCA Predict API.
    if (empty($address['country']) || !addressfield_lookup_postcodeanywhere_is_country_supported($address['country'])) {
      foreach ($format as $element_name => $element) {
        if (stristr($element_name, 'addressfield_lookup')) {
          unset($format[$element_name]);
        }
      }

      // Reset the address field lookup mode.
      unset($address['addressfield_lookup_mode']);

      // Ensure all normal address elements are visible.
      $format['street_block']['#access'] = TRUE;
      $format['locality_block']['#access'] = TRUE;
      $format['name_block']['#access'] = TRUE;
      $format['organisation_block']['#access'] = TRUE;
    }
  }

  return $format;
}

/**
 * Is the country supported by the postcode anywhere API?
 *
 * @param string $country
 *   ISO Country code.
 *
 * @return bool
 *   Is the country in the supported list.
 */
function addressfield_lookup_postcodeanywhere_is_country_supported($country) {
  return in_array($country, array_keys(_addressfield_lookup_postcodeanywhere_get_countries()));
}

/**
 * Ajax callback in response to selecting a lookup result.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param array $form_state
 *   An associative array containing the current state of the form.
 */
function addressfield_lookup_postcodeanywhere_standard_widget_refresh($form, $form_state) {
  // The target element is one element below the triggering country selector.
  $array_parents = $form_state['triggering_element']['#array_parents'];
  array_pop($array_parents);

  // Iterate over the form parents to find the element.
  $element = $form;
  foreach ($array_parents as $name) {
    $element = &$element[$name];
    if (!empty($element['#addressfield'])) {
      break;
    }
  }

  // Return the address block, but remove the '_weight' element inserted
  // by the field API.
  unset($element['_weight']);

  // Display the current message queue in the element prefix.
  // @FIXME
// theme() has been renamed to _theme() and should NEVER be called directly.
// Calling _theme() directly can alter the expected output and potentially
// introduce security issues (see https://www.drupal.org/node/2195739). You
// should use renderable arrays instead.
//
//
// @see https://www.drupal.org/node/2195739
// $element['#prefix'] .= theme('status_messages');


  // Replace the address field widget with the updated widget and focus on the
  // new country select list.
  $commands[] = ajax_command_replace(NULL, render($element));
  $commands[] = ajax_command_invoke('#' . $element['country']['#id'], 'focus');

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_addressfield_lookup_get_addresses_cache_id_update().
 */
function addressfield_lookup_postcodeanywhere_addressfield_lookup_get_addresses_cache_id_update($cache_id, $country) {
  // Get the PCA Predict API object.
  $addressfield_lookup_services = \Drupal::service('plugin.manager.address_lookup')->getDefinitions();
  $pca_predict = addressfield_lookup_postcodeanywhere_create($addressfield_lookup_services['postcodeanywhere'], $country);

  // Append the last id value to the cache ID if present.
  if (!is_null($pca_predict->getLastId())) {
    $cache_id .= ':' . $pca_predict->getLastId();
    return $cache_id;
  }

  return FALSE;
}

/**
 * Validate callback: Check if the selected value requires extra find steps.
 */
function _addressfield_lookup_postcodeanywhere_addresses_select_validate($element, &$form_state, &$form) {
  // Check if this was the triggering element.
  if ($element['#id'] == $form_state['triggering_element']['#id']) {
    // Get the address element from the form.
    $array_parents = array_slice($element['#parents'], 0, -1);
    $address = \Drupal\Component\Utility\NestedArray::getValue($form_state['values'], $array_parents);

    if (!empty($element['#value'])) {
      // The first part of the ID is the actual address ID. The second part is
      // the 'Next' operation returned by the API.
      //
      // @see http://www.pcapredict.com/support/webservice/captureplus/interactive/find/2.1/
      $address_id_parts = explode(':', $element['#value']);

      // Determine the action to take based on the ID parts.
      switch ($address_id_parts[1]) {
        case PCAPredict::FIND_OPERATION:
          // The API response indicates an additional lookup step is required.
          // Display a message to indicate this to the user.
          \Drupal::messenger()->addMessage(t('More information is needed. Please select the area your postal code is in.'));

          // Get the PCA Predict API object.
          $addressfield_lookup_services = \Drupal::service('plugin.manager.address_lookup')->getDefinitions();
          $pca_predict = addressfield_lookup_postcodeanywhere_create($addressfield_lookup_services['postcodeanywhere'], $address['country']);

          // Set the ID of this search result for use in the next lookup step.
          $pca_predict->setLastId($address_id_parts[0]);

          // Perform the extra lookup.
          $addresses = \Drupal::service('plugin.manager.address_lookup')->getAddresses($address['postal_code'], $address['country'], TRUE, TRUE);

          // Ensure we have a valid result.
          if (!is_array($addresses)) {
            return FALSE;
          }

          // Prepare list options from the lookup results.
          $address['addressfield_lookup_addresses'] = _addressfield_lookup_prepare_options($addresses);

          // Prefill the common details for each of the addresses (locality,
          // postcode, administrative_area) on the form.
          if (empty($address['addressfield_lookup_mode']) || $address['addressfield_lookup_mode'] != 'address_selected') {
            // Reset the address to the default values.
            _addressfield_lookup_default_values($address);

            // Set the mode.
            $address['addressfield_lookup_mode'] = 'address_selection';

            // Get the full details of the 1st address in the results.
            $first_address_details = \Drupal::service('plugin.manager.address_lookup')->getAddressDetails($addresses[0]['id']);

            // Set the common details.
            $address['locality'] = !empty($first_address_details['locality']) ? $first_address_details['locality'] : '';
            $address['postal_code'] = !empty($first_address_details['postal_code']) ? $first_address_details['postal_code'] : $address['postal_code'];
            $address['administrative_area'] = !empty($first_address_details['administrative_area']) ? $first_address_details['administrative_area'] : '';

            // Update the form state, where possible.
            if (isset($address['element_key']) && isset($form_state['addressfield'][$address['element_key']])) {
              $form_state['addressfield'][$address['element_key']] = array_diff_key($address, array('element_key' => ''));
            }

            // Set the address values on the form.
            foreach ($address as $key => $value) {
              // Update the form state for addressfield.
              // Note: form_state['input'] must be updated so that
              // addressfield_lookup_addressfield_format_generate() has correct
              // information during the rebuild.
              NestedArray::setValue($form_state['values'], array_merge($array_parents, array($key)), $value, TRUE);
              NestedArray::setValue($form_state['input'], array_merge($array_parents, array($key)), $value, TRUE);
            }
          }

          break;

        case PCAPredict::RETRIEVE_OPERATION:
          // Populate addressfield with the selected postal code address data.
          _addressfield_lookup_populate_addressfield($element['#value'], $element, $form_state);

          break;
      }
    }
  }
}

/**
 * Get the list of supported countries from the PCA Predict API.
 *
 * @param bool $reset
 *   Reset the country data static cache.
 *
 * @return array
 *   Array of ISO2 country codes.
 */
function _addressfield_lookup_postcodeanywhere_get_countries($reset = FALSE) {
  $language = \Drupal::languageManager()->getCurrentLanguage();

  $countries = &drupal_static(__FUNCTION__);

  // Check if we have statically cached countries and no reset flag was passed.
  if (isset($countries) && !$reset) {
    return $countries;
  }

  $config = Drupal::config('addressfield_lookup_postcodeanywhere.settings');
  // Get the quality setting.
  $quality = $config->get('addressfield_lookup_postcodeanywhere_country_quality');

  // Build the cache ID we'll use for the countries list.
  $countries_cache_id = 'pcapredict:countries:' . $quality;

  // Check the cache bin for the address details.
  if (($cached_countries = \Drupal::cache('addressfield_lookup_postcodeanywhere_country_data')->get($countries_cache_id)) && !$reset) {
    $countries = $cached_countries->data;
    return $countries;
  }

  // Check the postcode anywhere configuration variables exist.
  if (!$config->get('addressfield_lookup_postcodeanywhere_license')) {
    throw new \Exception('Postcode Anywhere has not been configured.');
  }

  // Get the API wrapper.
  $pca_predict = new PCAPredictAdapter(
    $config->get('addressfield_lookup_postcodeanywhere_license'),
    $config->get('addressfield_lookup_postcodeanywhere_login'),
    $language->getName()
  );

  // Get and parse the countries list.
  $api_countries = $pca_predict->getCountryData();

  if (!is_array($api_countries)) {
    return FALSE;
  }

  // Filter by the quality parameter.
  $api_countries = array_filter($api_countries, static function ($api_country) use ($quality) {
    return $api_country->Addressing >= $quality;
  });

  // Build out countries list.
  $countries = [];

  foreach ($api_countries as $api_country) {
    $countries[$api_country->Country] = $api_country->Name;
  }

  // Cache the countries list. Note the missing cache length, we'll just keep
  // this permanently until the next cache clear.
  \Drupal::cache('addressfield_lookup_postcodeanywhere_country_data')->set($countries_cache_id, $countries);

  return $countries;
}
